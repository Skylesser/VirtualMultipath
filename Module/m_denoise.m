function ret = m_denoise( x, varargin )
%MODULE_DENOISE signal denoise
%   Detailed explanation goes here

    %% PCA denoise
    %{
    x(isinf(x)) = max(max(x(isfinite(x))));
    ma1 = mean(x);
    ma1 = bsxfun(@minus, x, ma1);
    corr = (ma1.' * ma1) ./ (length(ma1)-1);
    pca = pcacov(corr);

    e = ma1 * pca;
    ret = e(:,1);
    
    x = ret;
    % wavelet denoise
    col = size(x, 2);
    ret = zeros(length(x), col);
    for i=1:col
        ret(:,i) = wden(x(:,i), 'minimaxi', 's', 'one', 3, 'db3');  % ?????? db3 ?????????????????????5???????????????????????????????????? minimaxi ??????????????????????????? 
        %ret(:,i) = wden(x(:,i), 'heursure', 's', 'one', 3, 'sym8'); % ?????? sym8 ?????????????????????5????????? , ???????????????????????? sure ???????????????????????????
    end
    %}
    
    %% Savitzky-Golay smoothing
    
    fLen    = 12.5;
    if nargin == 2
        fLen = varargin{1};
    end
    
    N = 2;                 % Order of polynomial fit
    F = floor(fLen);  % Windows Length (about 1 period)
%     F = floor(samp_rate / 2);    % Windows Length (about 1 period)
    if mod(F, 2) == 0
        F = F + 1;          % Make it odd
    end
    %HalfWin  = ((F+1)/2) -1;
    %[b,g] = sgolay(N,F);   % Calculate S-G coefficients
    ret = sgolayfilt( x, N, F );
    %ret = smooth( x, F, 'sgolay', N );
    

%{
    %% moving average denoise
    window = 1 * samp_rate;
    h = 1/window*ones(1, window);
    avg = filter(h, 1, x);

    % primary component analysis denoise
    a = x(1:int(samp_rate), 30);
    a = a - avg(a);
    corr = a' * a;
%}
end

